{
  "name": "D-pac REST API",
  "version": "0.1.0",
  "description": "REST API documentation",
  "title": "D-pac REST API documentation",
  "url": "/api",
  "header": {
    "title": "Intro",
    "content": "<h1 id=\"introduction\">Introduction</h1>\n<p>The D-pac REST API attempts to follow best practices as laid out by <a href=\"https://github.com/interagent/http-api-design\">Interagent&#39;s HTTP API Design Guide</a>, however since the REST API runs on a KeystoneJS (i.e. Express) HTTP server, some principles are quite hard to adhere to, without jumping through hoops.</p>\n<h2 id=\"requests\">Requests</h2>\n<h3 id=\"-patch-and-put-\"><code>PATCH</code> and <code>PUT</code></h3>\n<p>All methods marked with <code>PATCH</code> are also available with <code>PUT</code>, with the major difference that all fields are optional with <code>PATCH</code> and required with <code>PUT</code>.</p>\n<h3 id=\"parameters\">Parameters</h3>\n<p>All request parameters can be supplied either as query string arguments or as json body.</p>\n<p>E.g.</p>\n<pre><code>POST //api/me/session?email=john.doe@example.com&amp;password=foo&amp;password_confirm=foo\n</code></pre><p>Or</p>\n<pre><code>POST //api/me/session\n{\n    &quot;email&quot; : &quot;john.doe@example.com&quot;,\n    &quot;password&quot; : &quot;foo&quot;,\n    &quot;password_confirm&quot; : &quot;foo&quot;\n}\n</code></pre><h3 id=\"results\">Results</h3>\n<p>All successful requests return a status code of <code>200 OK</code> or <code>204 No Content</code>, as documented for each method.</p>\n<h2 id=\"errors\">Errors</h2>\n<p>All error objects have a similar (base) structure:</p>\n<pre><code class=\"lang-json\">{\n  &quot;code&quot;: &quot;404&quot;,\n  &quot;status&quot;: &quot;404&quot;,\n  &quot;name&quot;: &quot;Http404Error&quot;,\n  &quot;message&quot;: &quot;Not Found&quot;\n}\n</code></pre>\n<p>(All subsequent quotes taken from <a href=\"http://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">wikipedia</a>)</p>\n<h3 id=\"400-bad-request\">400 Bad Request</h3>\n<blockquote>\n<p>The request was a valid request, but the server is refusing to respond to it. Unlike a 401 Unauthorized response, authenticating will make no difference.</p>\n</blockquote>\n<p>These errors include failure to comply due to a missing parameter.</p>\n<h3 id=\"401-unauthorized\">401 Unauthorized</h3>\n<blockquote>\n<p>Authentication is required and has failed or has not yet been provided.</p>\n</blockquote>\n<h3 id=\"404-not-found\">404 Not Found</h3>\n<blockquote>\n<p>The requested resource could not be found but may be available again in the future. Subsequent requests by the client are permissible.</p>\n</blockquote>\n<h3 id=\"405-method-not-allowed\">405 Method Not Allowed</h3>\n<blockquote>\n<p>A request was made of a resource using a request method not supported by that resource; for example, using GET on a form which requires data to be presented via POST, or using PUT on a read-only resource.</p>\n</blockquote>\n<h3 id=\"422-unprocessable-entity\">422 Unprocessable Entity</h3>\n<blockquote>\n<p>The request was well-formed but was unable to be followed due to semantic errors.</p>\n</blockquote>\n<p>These errors occur when an operation on an entity fails, not due to malformed syntax, but because of a missing operator or operand, incorrect data type, et cetera.\n422 errors provide an extra field <code>exaplanation</code> with a human readable explanation on what went wrong.</p>\n<p>E.g.:</p>\n<pre><code class=\"lang-json\">{\n  &quot;code&quot;: &quot;422&quot;,\n  &quot;status&quot;: &quot;422&quot;,\n  &quot;name&quot;: &quot;Http422Error&quot;,\n  &quot;message&quot;: &quot;Validation failed&quot;,\n  &quot;explanation&quot;: [\n      &quot;Passwords must match&quot;\n  ]\n}\n</code></pre>\n<h3 id=\"500-internal-server-error\">500 Internal Server Error</h3>\n<blockquote>\n<p>A generic error message, given when an unexpected condition was encountered and no other, more specific message is suitable.</p>\n</blockquote>\n<h1 id=\"methods\">Methods</h1>\n"
  },
  "sampleUrl": false,
  "apidoc": "0.2.0",
  "generator": {
    "name": "apidoc",
    "time": "2015-01-13T07:47:37.068Z",
    "url": "http://apidocjs.com",
    "version": "0.12.0"
  }
}